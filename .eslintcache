[{"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\index.js":"1","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\App.js":"2","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\global.js":"3","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\header.js":"4","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\homepage\\homepage.js":"5","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\signUp.js":"6","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\signIn.js":"7","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\homepage\\style.js":"8","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\form.js":"9","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\style.js":"10","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\style.js":"11","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\form.js":"12","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\style.js":"13","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\api.js":"14","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\forgot.js":"15","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\style.js":"16","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\form.js":"17","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\forgot.js":"18","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\style.js":"19","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\form.js":"20","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\search.js":"21","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\logout.js":"22","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\takeaway.js":"23","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\form.js":"24","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\style.js":"25","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\booking.js":"26","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\style.js":"27","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\form.js":"28","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\staff.js":"29","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\form.js":"30","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\style.js":"31","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\menuList.js":"32","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\form.js":"33","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\orders.js":"34","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\print.js":"35","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\style.js":"36","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\invoice.js":"37","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\basket.js":"38","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\test.js":"39","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\delivery.js":"40","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\form.js":"41","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\style.js":"42"},{"size":198,"mtime":1610059905826,"results":"43","hashOfConfig":"44"},{"size":1804,"mtime":1611621157636,"results":"45","hashOfConfig":"44"},{"size":369,"mtime":1611596227939,"results":"46","hashOfConfig":"44"},{"size":1551,"mtime":1611611854672,"results":"47","hashOfConfig":"44"},{"size":582,"mtime":1611139256768,"results":"48","hashOfConfig":"44"},{"size":2513,"mtime":1611148025228,"results":"49","hashOfConfig":"44"},{"size":1807,"mtime":1611492818219,"results":"50","hashOfConfig":"44"},{"size":871,"mtime":1610987932417,"results":"51","hashOfConfig":"44"},{"size":1681,"mtime":1611147786921,"results":"52","hashOfConfig":"44"},{"size":2195,"mtime":1610553897478,"results":"53","hashOfConfig":"44"},{"size":1745,"mtime":1611417315926,"results":"54","hashOfConfig":"44"},{"size":1706,"mtime":1611496991098,"results":"55","hashOfConfig":"44"},{"size":2197,"mtime":1610798918398,"results":"56","hashOfConfig":"44"},{"size":186,"mtime":1611664089712,"results":"57","hashOfConfig":"44"},{"size":1099,"mtime":1610556191933,"results":"58","hashOfConfig":"44"},{"size":2192,"mtime":1610556337189,"results":"59","hashOfConfig":"44"},{"size":1418,"mtime":1610557860345,"results":"60","hashOfConfig":"44"},{"size":1254,"mtime":1611146193951,"results":"61","hashOfConfig":"44"},{"size":2192,"mtime":1610556337189,"results":"62","hashOfConfig":"44"},{"size":932,"mtime":1611236217028,"results":"63","hashOfConfig":"44"},{"size":1222,"mtime":1611236160554,"results":"64","hashOfConfig":"44"},{"size":329,"mtime":1611492986610,"results":"65","hashOfConfig":"44"},{"size":4426,"mtime":1611695077526,"results":"66","hashOfConfig":"44"},{"size":1823,"mtime":1611613505229,"results":"67","hashOfConfig":"44"},{"size":2333,"mtime":1611493431212,"results":"68","hashOfConfig":"44"},{"size":4484,"mtime":1611241820937,"results":"69","hashOfConfig":"44"},{"size":2326,"mtime":1611145433678,"results":"70","hashOfConfig":"44"},{"size":1789,"mtime":1611415264513,"results":"71","hashOfConfig":"44"},{"size":12773,"mtime":1611695002148,"results":"72","hashOfConfig":"44"},{"size":1402,"mtime":1611492787203,"results":"73","hashOfConfig":"44"},{"size":3530,"mtime":1611245613721,"results":"74","hashOfConfig":"44"},{"size":4730,"mtime":1611611817777,"results":"75","hashOfConfig":"44"},{"size":606,"mtime":1611492967517,"results":"76","hashOfConfig":"44"},{"size":4096,"mtime":1611620934310,"results":"77","hashOfConfig":"44"},{"size":576,"mtime":1611620259407,"results":"78","hashOfConfig":"44"},{"size":854,"mtime":1611620596004,"results":"79","hashOfConfig":"44"},{"size":186,"mtime":1611620541871,"results":"80","hashOfConfig":"44"},{"size":4350,"mtime":1611621179422,"results":"81","hashOfConfig":"44"},{"size":4467,"mtime":1611620690029,"results":"82","hashOfConfig":"44"},{"size":4604,"mtime":1611621428467,"results":"83","hashOfConfig":"44"},{"size":1917,"mtime":1611621404995,"results":"84","hashOfConfig":"44"},{"size":2326,"mtime":1611621266987,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"hrxr0x",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"88"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"88"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"88"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"88"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\index.js",[],["190","191"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\App.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\global.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\header.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\homepage\\homepage.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\signUp.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\signIn.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\homepage\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\form.js",["192","193"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\n\r\n\r\nconst Form = (callback) => {\r\n    const [submit, setSubmit] = useState(false);\r\n\r\n    const data = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            phoneNumber: '',\r\n            email: '',\r\n            password: '',\r\n            confPassword: ''\r\n        },\r\n\r\n        validationSchema: Yup.object().shape({\r\n            name: Yup.string().min(2, 'Minimum 2 characters').required('Name is required'),\r\n            phoneNumber: Yup.number().required('Phone number is required'),\r\n            email: Yup.string().required('Email is required').email('Invalid format'),\r\n            password: Yup.string().required('Password is required').min(6, 'Password must have at least 6 characters'),\r\n            confPassword: Yup.string().oneOf([Yup.ref('password')], 'Password does not match').required('Confirm Password is required')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            createUser();\r\n        }\r\n\r\n    });\r\n\r\n\r\n    const createUser = async () => {\r\n        let err;\r\n        try {\r\n            const res = await api.post('/users/register', data.values);\r\n            setSubmit(\"Account created successfully.\");\r\n        } catch (e) {\r\n            if (e.response) {\r\n                err = e.response.data;\r\n                const { error } = err;\r\n                setSubmit(error);\r\n            } else {\r\n                setSubmit(\"Some error has occured. Please try again.\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n        submit,\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\form.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\api.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\forgot.js",["194"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\form.js",["195","196","197","198"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\forgot.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\form.js",["199","200"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\n\r\n\r\n\r\nconst Form = (callback) => {\r\n    const [submit, setSubmit] = useState(false);\r\n\r\n    const data = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n\r\n        validationSchema: Yup.object().shape({\r\n            email: Yup.string().required('Email is required').email('Invalid format'),\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            forgot();\r\n        }\r\n    });\r\n\r\n    const forgot = async () => {\r\n        try {\r\n            const res = await api.post('/forgot/password', data.values);\r\n            setSubmit(\"Please check your mailbox.\");\r\n\r\n        } catch (e) {\r\n            setSubmit(\"Some error has occured. Please try again.\");\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return {\r\n        data,\r\n        submit,\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\search.js",["201","202","203"],"import React, { useState } from 'react';\r\nimport api from '../../services/api';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\nconst Search = () => {\r\n\r\n    const data = useFormik({\r\n        initialValues: {\r\n            search: '',\r\n        },\r\n\r\n        validationSchema: Yup.object().shape({\r\n            search: Yup.string().min(3, 'Search must have at least 3 characters').required('Item is required'),\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            searchItem(data.values.search);\r\n\r\n        }\r\n    });\r\n\r\n    const searchItem = async (search) => {\r\n        const filter = search;\r\n        const table = document.getElementById('myTable');\r\n        console.log(table);\r\n        const tr = table.getElementsByTagName(\"tr\");\r\n        for (var i = 0; i < tr.length; i++) {\r\n            const td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                const txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n    }\r\n\r\n}\r\n\r\nexport default Search;",["204","205"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\logout.js",["206"],"import React, { useEffect } from 'react';\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\n\r\nconst Logout = () => {\r\n\r\n    sessionStorage.clear();\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        history.go(0);\r\n    }, [])\r\n      \r\n\r\n    return <Redirect to='/' />\r\n}\r\n\r\nexport default Logout;\r\n\r\n","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\takeaway.js",["207","208"],"import React, { useEffect } from 'react';\r\nimport { Background, Container, Content } from './style';\r\nimport Form from './form';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\nimport dateFnsFormat from 'date-fns/format';\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport Header from '../../styles/header';\r\n\r\n\r\n\r\nconst Takeaway = () => {\r\n\r\n    let user;\r\n\r\n    let order;\r\n\r\n    const { data, submit } = Form();\r\n\r\n    useEffect(() => {\r\n\r\n        user = JSON.parse(sessionStorage.getItem('user'));\r\n        order = JSON.parse(localStorage.getItem('orders'));\r\n\r\n        if (!order) {\r\n            order = JSON.parse(localStorage.getItem('lastOrders'));\r\n        }\r\n\r\n        if (!user) {\r\n\r\n            return <Redirect to='/login' />\r\n        }\r\n\r\n        if (user.status === 'costumer') {\r\n            data.setFieldValue('user', user.email);\r\n            data.setFieldValue('name', user.name);\r\n            data.setFieldValue('email', user.email);\r\n            if (user.phoneNumber) {\r\n                data.setFieldValue('phoneNumber', user.phoneNumber);\r\n            }\r\n        }\r\n\r\n        data.setFieldValue('user', user._id);\r\n        data.setFieldValue('lastOrder', order);\r\n\r\n        reduceOrder();\r\n\r\n    }, [order]);\r\n\r\n    const reduceOrder = () => {\r\n        const pair = []\r\n        order.map((key) => {\r\n            const dish = key.id;\r\n            const quantity = key.quantity;\r\n            pair.push({ dish: dish, quantity: quantity });\r\n            return pair;\r\n        });\r\n        \r\n        return data.setFieldValue('order', pair);\r\n    }\r\n\r\n\r\n    function formatDate(date, format, locale) {\r\n        return dateFnsFormat(date, format, { locale });\r\n    }\r\n    const FORMAT = 'dd/MM/yyyy';\r\n\r\n\r\n    function handleDayChange(day) {\r\n        let selectedDay = new Date(day);\r\n        selectedDay = selectedDay.getDate() + '/' + selectedDay.getMonth() + 1 + '/' + selectedDay.getFullYear();\r\n        data.setFieldValue('date', selectedDay);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Container>\r\n                <Background />\r\n                <Content>\r\n                    <div style={{ textAlign: 'center', fontSize: '16px', fontWeight: 'bold', color: '#8B0000', marginTop: '60px' }}>\r\n                        {submit !== null &&\r\n                            <p>{submit ? submit : null}</p>\r\n                        }\r\n                        {data.errors.user && data.touched.user && (\r\n                            <p>{data.errors.user}</p>)}\r\n                        {data.errors.order && data.touched.order && (\r\n                            <p>{data.errors.order}</p>)}\r\n                    </div>\r\n                    <form onSubmit={data.handleSubmit}>\r\n                        <h1>Ordering Takeaway: </h1>\r\n                        <DayPickerInput value={data.values.date} style={{ width: '100%' }}\r\n                            formatDate={formatDate} format={FORMAT} dayPickerProps={{\r\n                                modifiers: {\r\n                                    disabled: [{ daysOfWeek: [2] }, { before: new Date() }]\r\n                                }\r\n                            }}\r\n                            inputProps={{ readOnly: true }} onDayChange={handleDayChange} />\r\n                        {data.errors.date && data.touched.date && (\r\n                            <p>{data.errors.date}</p>)}\r\n                        <input name='name' type='text' placeholder='Name' value={data.values.name} onChange={data.handleChange} />\r\n                        {data.errors.name && data.touched.name && (\r\n                            <p>{data.errors.name}</p>)}\r\n                        <input name='phoneNumber' type='text' placeholder='Phone number' value={data.values.phoneNumber} onChange={data.handleChange} />\r\n                        {data.errors.phoneNumber && data.touched.phoneNumber && (\r\n                            <p>{data.errors.phoneNumber}</p>)}\r\n                        <input name='comment' type='text' placeholder='Comment' value={data.values.comment} onChange={data.handleChange} />\r\n                        <button type='submit'> Order </button>\r\n                    </form>\r\n                    <Link to='/menu' style={{ color: '#0000FF' }}>Back to Menu</Link>\r\n                </Content>\r\n            </Container>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Takeaway;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\form.js",["209","210"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\n\r\nconst Form = (callback) => {\r\n\r\n    const [submit, setSubmit] = useState(false);\r\n\r\n    let today = new Date();\r\n\r\n    today = today.getDate()+'/'+today.getMonth()+1+'/'+today.getFullYear();\r\n\r\n    const data = useFormik({\r\n        initialValues: {\r\n            date: today,\r\n            name: '',\r\n            phoneNumber: '',\r\n            comment: '',\r\n            user: '',\r\n            order: '',\r\n            lastOrder: '',\r\n        },\r\n\r\n        validationSchema: Yup.object().shape({\r\n            name: Yup.string().required('Name is required').min(3, 'At least 3 characters'),\r\n            phoneNumber: Yup.number().required('Phone number is required'),\r\n            user: Yup.string().required('You must be logged in'),\r\n            order: Yup.array().required('There is no order')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            addOrder();\r\n        }\r\n\r\n    });\r\n\r\n    const addOrder = async () => {\r\n        setSubmit('Creating order...')\r\n        let err;\r\n        try {\r\n            const res = await api.post('/takeaway', data.values);\r\n            setSubmit(\"Order created successfully.\");\r\n            localStorage.setItem('lastOrders', JSON.stringify(data.values.lastOrder));\r\n            localStorage.removeItem('orders');\r\n        } catch (e) {\r\n            if (e.response) {\r\n                err = e.response;\r\n                const { error } = err;\r\n                setSubmit(error);\r\n            } else {\r\n                setSubmit(\"Some error has occured. Please try again.\");\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return {\r\n        data,\r\n        submit\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\booking.js",["211"],"import React, { useEffect } from 'react';\r\nimport { Background, Container, Content } from './style';\r\nimport Form from './form';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\nimport dateFnsFormat from 'date-fns/format';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Header from '../../styles/header';\r\n\r\n\r\nconst Bookings = () => {\r\n\r\n    let user; \r\n\r\n    const { data, submit } = Form();\r\n\r\n    useEffect(() => {\r\n\r\n        user = JSON.parse(sessionStorage.getItem('user'));\r\n        \r\n        if (!user) {\r\n            return <Redirect to='/login' />\r\n\r\n        } else if (user.status === 'costumer') { \r\n            data.setFieldValue('user', user.email);          \r\n            data.setFieldValue('name', user.name);\r\n            data.setFieldValue('email', user.email);\r\n            if (user.phoneNumber) {\r\n            data.setFieldValue('phoneNumber', user.phoneNumber);\r\n        } else {\r\n            data.setFieldValue('user', user.email); \r\n        }}\r\n    }, []);\r\n        \r\n\r\n    function formatDate(date, format, locale) {\r\n        return dateFnsFormat(date, format, { locale });\r\n    }\r\n    const FORMAT = 'dd/MM/yyyy';\r\n\r\n\r\n    function handleDayChange(day) {\r\n        let selectedDay = new Date (day);\r\n        selectedDay = selectedDay.getFullYear()+'/'+selectedDay.getMonth()+1+'/'+selectedDay.getDate();\r\n        data.setFieldValue('date', selectedDay);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Header />\r\n        <Container>\r\n            <Background/>\r\n            <Content>\r\n            <div style={{ textAlign: 'center', fontSize: '16px', fontWeight: 'bold', color: '#8B0000' }}>\r\n                    {submit !== null &&\r\n                        <p>{submit ? submit : null}</p>\r\n                    }\r\n                    {data.errors.user && data.touched.user && (\r\n                        <p>{data.errors.user}</p>)}\r\n                </div>\r\n                <form onSubmit={data.handleSubmit}>\r\n                    <h1>Booking table: </h1>\r\n                    <DayPickerInput placeholder='Date' style={{ width: '100%' }}\r\n                        formatDate={formatDate} format={FORMAT} dayPickerProps={{\r\n                            modifiers: {\r\n                                disabled: [{ daysOfWeek: [2] }, { before: new Date() }]\r\n                            }\r\n                        }}\r\n                        inputProps={{ readOnly: true }} onDayChange={handleDayChange} />\r\n                    {data.errors.date && data.touched.date && (\r\n                        <p>{data.errors.date}</p>)}\r\n                    <select name='time'\r\n                        value={data.values.time}\r\n                        onChange={data.handleChange}\r\n                        onBlur={data.handleBlur}>\r\n                        <option value='' label='Time' />\r\n                        <option value='16' label='16h' />\r\n                        <option value='18' label='18h' />\r\n                        <option value='20' label='20h' />\r\n                    </select>\r\n                    {data.errors.time && data.touched.time && (\r\n                        <p>{data.errors.time}</p>)}\r\n                    <input name='number' type='number' min='1' max='16'\r\n                        placeholder='Number of people' value={data.values.number}\r\n                        onChange={data.handleChange} />\r\n                    {data.errors.number && data.touched.number && (\r\n                        <p>{data.errors.number}</p>)}\r\n                    <input name='name' type='text' placeholder='Name' value={data.values.name} onChange={data.handleChange} />\r\n                    {data.errors.name && data.touched.name && (\r\n                        <p>{data.errors.name}</p>)}\r\n                    <input name='email' type='text' placeholder='Email' value={data.values.email} onChange={data.handleChange} />\r\n                    {data.errors.email && data.touched.email && (\r\n                        <p>{data.errors.email}</p>)}\r\n                    <input name='phoneNumber' type='text' placeholder='Phone number' value={data.values.phoneNumber} onChange={data.handleChange} />\r\n                    {data.errors.phoneNumber && data.touched.phoneNumber && (\r\n                        <p>{data.errors.phoneNumber}</p>)}\r\n                    <button type='submit'> Book </button>\r\n                </form>\r\n            </Content>\r\n        </Container>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Bookings;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\form.js",["212","213"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\n\r\nconst Calendar = (callback) => {\r\n    const [submit, setSubmit] = useState(false);\r\n\r\n    const data = useFormik({\r\n        initialValues: {\r\n            date: '',\r\n            time: '',\r\n            number: '',\r\n            name: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            user: '',\r\n        },\r\n\r\n        validationSchema: Yup.object().shape({\r\n            date: Yup.string().required('Date is required'),\r\n            time: Yup.string().required('Time is required'),\r\n            number: Yup.number().required('Number of people is required'),\r\n            name: Yup.string().required('Name is required').min(3, 'At least 3 characters'),\r\n            email: Yup.string().required('Email is required').email('Invalid format'),\r\n            phoneNumber: Yup.number().required('Phone number is required'),\r\n            user: Yup.string().required('You must be logged in')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            addBooking();\r\n        }\r\n\r\n    });\r\n\r\n    const addBooking = async () => {\r\n        let err;\r\n        try {\r\n            const res = await api.post(`/bookings/:${data.values.email}`, data.values);\r\n            setSubmit(\"Table successfully booked.\");\r\n        } catch (e) {\r\n            if (e.response) {\r\n                err = e.response.data;\r\n                const { error } = err;\r\n                setSubmit(error);\r\n            } else {\r\n                setSubmit(\"Some error has occured. Please try again.\");\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return {\r\n        data,\r\n        submit\r\n    }\r\n\r\n}\r\n\r\nexport default Calendar;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\staff.js",["214"],"import React, { useState, useEffect } from 'react';\r\nimport { Bookings, Container, ContainerSec, Content, Takeaway } from './style';\r\nimport Form from './form';\r\nimport 'react-day-picker/lib/style.css';\r\nimport Header from '../../styles/header';\r\nimport { Row, Col, Table } from 'reactstrap';\r\nimport api from '../../services/api';\r\nimport Order from './orders';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nconst Staff = () => {\r\n\r\n    const { data, submit } = Form();\r\n\r\n    const [bookings, setBookings] = useState(null);\r\n    const [takeaways, setTakeaways] = useState(null);\r\n    const [deliveries, setDeliveries] = useState(null);\r\n\r\n    let user;\r\n\r\n    useEffect(() => {\r\n\r\n        user = JSON.parse(sessionStorage.getItem('user'));\r\n        \r\n        if (!user) {\r\n            return <Redirect to='/login' />\r\n\r\n        } else if (user.status === 'costumer') { \r\n            return <Redirect to='/' />\r\n        }\r\n    }, []);\r\n\r\n    const bookingsList = async () => {\r\n        const result = await api.get('/bookings');\r\n        setBookings(result.data.bookings);\r\n    }\r\n\r\n    const takeawayList = async () => {\r\n        const result = await api.get('/takeaway');\r\n        setTakeaways(result.data.takeawayList);\r\n    }\r\n\r\n    const deliveryList = async () => {\r\n        const result = await api.get('/delivery');\r\n        console.log(result);\r\n        setDeliveries(result.data.deliveryList);\r\n    }\r\n\r\n    const retrieveBooking = () => {\r\n        setBookings(null);\r\n    }\r\n\r\n    const retrieveTakeaway = () => {\r\n        setTakeaways(null);\r\n    }\r\n\r\n    const retrieveDelivery = () => {\r\n        setDeliveries(null);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Container>\r\n                <Col>\r\n                    <ContainerSec>\r\n                        <Row>\r\n                            <Content>\r\n                                <div style={{ textAlign: 'center', fontSize: '16px', fontWeight: 'bold', color: '#8B0000' }}>\r\n                                    {submit !== null &&\r\n                                        <p>{submit ? submit : null}</p>\r\n                                    }\r\n                                    {data.errors.user && data.touched.user && (\r\n                                        <p>{data.errors.user}</p>)}\r\n                                </div>\r\n                                <form onSubmit={data.handleSubmit}>\r\n                                    <h1>Time: </h1>\r\n                                    <label> Takeaway time:\r\n                                <select name='time'\r\n                                            value={data.values.time}\r\n                                            onChange={data.handleChange}\r\n                                            onBlur={data.handleBlur}>\r\n                                            <option value='15' label='15min' />\r\n                                            <option value='20' label='20min' />\r\n                                            <option value='25' label='25min' />\r\n                                            <option value='30' label='30min' />\r\n                                            <option value='35' label='35min' />\r\n                                            <option value='40' label='40min' />\r\n                                            <option value='45' label='45min' />\r\n                                            <option value='50' label='50min' />\r\n                                            <option value='55' label='55min' />\r\n                                            <option value='60' label='60min' />\r\n                                        </select>\r\n                                    </label>\r\n                                    <label>\r\n                                        Delivery time:\r\n                            <select name='time'\r\n                                            value={data.values.time}\r\n                                            onChange={data.handleChange}\r\n                                            onBlur={data.handleBlur}>\r\n                                            <option value='30' label='30min' />\r\n                                            <option value='40' label='40min' />\r\n                                            <option value='45' label='45min' />\r\n                                            <option value='50' label='50min' />\r\n                                            <option value='60' label='60min' />\r\n                                            <option value='80' label='80min' />\r\n                                            <option value='90' label='90min' />\r\n                                        </select>\r\n                                    </label>\r\n                                    <button type='submit'> Update </button>\r\n                                </form>\r\n                            </Content>\r\n                        </Row>\r\n                        <Row>\r\n                            <Bookings>\r\n                                <form>\r\n                                    <h1>Bookings </h1>\r\n                                    <Row>\r\n                                        <button type='button' onClick={bookingsList}>\r\n                                            Bookings </button>\r\n                                        <button type='button' onClick={retrieveBooking}>\r\n                                            Retrieve </button>\r\n\r\n                                    </Row>\r\n\r\n                                    <div style={{ overflow: 'auto', maxHeight: '200px' }}>\r\n                                        <Table style={{ maxWidth: '350px', marginLeft: '10px', fontSize: '14px' }}>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th style={{ width: '20px' }}>Name</th>\r\n                                                    <th style={{ width: '5px' }}>Date</th>\r\n                                                    <th style={{ width: '5px' }}>Time</th>\r\n                                                    <th style={{ width: '5px' }}>People</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            {bookings &&\r\n                                                bookings.map((booking, index) => {\r\n                                                    let date = new Date(booking.date);\r\n                                                    let time;\r\n                                                    time = date.getHours();\r\n                                                    date = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\r\n                                                    return (\r\n                                                        <tbody>\r\n                                                            <tr key={index}>\r\n                                                                <th style={{ fontWeight: '300' }}>{booking.name}</th>\r\n                                                                <th style={{ fontWeight: '300' }}>{date}</th>\r\n                                                                <th style={{ fontWeight: '300' }}>{time}h</th>\r\n                                                                <th style={{ fontWeight: '300' }}>{booking.numPeople}</th>\r\n                                                            </tr>\r\n                                                        </tbody>\r\n                                                    );\r\n                                                })}\r\n                                        </Table>\r\n                                    </div>\r\n                                </form>\r\n                            </Bookings>\r\n                        </Row>\r\n                    </ContainerSec>\r\n                </Col>\r\n                <Col>\r\n                    <Takeaway>\r\n                        <form>\r\n                            <h1>Takeaway</h1>\r\n                            <Row>\r\n                                <button type='button' onClick={takeawayList}>\r\n                                    Orders </button>\r\n                                <button type='button' onClick={retrieveTakeaway}>\r\n                                    Retrieve </button>\r\n                            </Row>\r\n                            <div style={{ overflow: 'auto', maxHeight: '350px' }}>\r\n                                <Table style={{ width: '100%', maxWidth: '500px', fontSize: '14px' }}>\r\n                                    <thead>\r\n                                        <tr style={{ position: 'sticky' }}>\r\n                                            <th style={{ width: '50px' }}></th>\r\n                                            <th style={{ width: '150px' }}>Name</th>\r\n                                            <th style={{ width: '150px' }}>Time</th>\r\n                                            <th style={{ width: '150px' }}>Paid</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    {takeaways &&\r\n                                        takeaways.map((takeaway, key) => {\r\n                                            return (\r\n                                                <tbody key={key}>\r\n                                                    <tr>\r\n                                                        <th><Order id={takeaway._id} /></th>\r\n                                                        <th style={{ fontWeight: '300' }}>{takeaway.costumer}</th>\r\n                                                        <th style={{ fontWeight: '300' }}>{takeaway.time}</th>\r\n                                                        <th style={{ fontWeight: '300' }}>{takeaway.paid}</th>\r\n                                                    </tr>\r\n                                                    <tr></tr>\r\n                                                </tbody>\r\n                                            );\r\n                                        })}\r\n                                </Table>\r\n                            </div>\r\n                        </form>\r\n                    </Takeaway>\r\n                </Col>\r\n                <Col>\r\n                    <Takeaway>\r\n                        <form>\r\n                            <h1>Delivery</h1>\r\n                            <Row>\r\n                                <button type='button' onClick={deliveryList}>\r\n                                    Orders </button>\r\n                                <button type='button' onClick={retrieveDelivery}>\r\n                                    Retrieve </button>\r\n                            </Row>\r\n                            <div style={{ overflow: 'auto', maxHeight: '350px' }}>\r\n                                <Table style={{ width: '100%', maxWidth: '500px', fontSize: '14px' }}>\r\n                                    <thead>\r\n                                        <tr style={{ position: 'sticky' }}>\r\n                                            <th style={{ width: '50px' }}></th>\r\n                                            <th style={{ width: '150px' }}>Address</th>\r\n                                            <th style={{ width: '150px' }}>Time</th>\r\n                                            <th style={{ width: '150px' }}>Paid</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    {deliveries &&\r\n                                        deliveries.map((delivery, item) => {\r\n                                            return (\r\n                                                <tbody>\r\n                                                    <tr key={item}>\r\n                                                        <th><Order id={delivery._id} /></th>\r\n                                                        <th style={{ fontWeight: '300' }}>{delivery.address}</th>\r\n                                                        <th style={{ fontWeight: '300' }}>{delivery.time}</th>\r\n                                                        <th style={{ fontWeight: '300' }}>{delivery.paid}</th>\r\n\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            );\r\n                                        })}\r\n                                </Table>\r\n                            </div>\r\n                        </form>\r\n                    </Takeaway>\r\n                </Col>\r\n            </Container>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Staff;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\form.js",["215"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\nimport {useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst Form = (callback) => {\r\n    \r\n    const [submit, setSubmit] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const data = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n\r\n        validationSchema: Yup.object().shape({\r\n            email: Yup.string().required('Email is required').email('Invalid format'),\r\n            password: Yup.string().required('Password is required'),\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            login();\r\n        }\r\n\r\n    });\r\n\r\n    const login = async () => {\r\n        let err;\r\n        try {\r\n            const res = await api.post('/users/login', data.values);\r\n            sessionStorage.setItem('user', JSON.stringify(res.data));\r\n            setSubmit('You are logged in!');\r\n            history.go(0);\r\n        } catch (e) {\r\n            if (e.response) {\r\n                err = e.response.data;\r\n                const { error } = err;\r\n                setSubmit(error);\r\n            } else {\r\n                setSubmit(\"Some error has occured. Please try again.\");\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return {\r\n        data,\r\n        submit\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\menuList.js",["216"],"import React from 'react';\r\nimport { Container, Content, Title, Button } from '../menu/style';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport { Table} from 'react-bootstrap';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Header from '../../styles/header';\r\nimport Form from './form';\r\nimport Basket from './basket';\r\n\r\n\r\n\r\nconst Menu = () => {\r\n\r\n  const menu = JSON.parse(localStorage.getItem('menuList'));\r\n\r\n  const { data } = Form();\r\n\r\n  try {\r\n    if (menu.length > 0) {\r\n    };\r\n  } catch (e) {\r\n    return <Redirect to='/'></Redirect>\r\n  }\r\n\r\n  const types = (menuType) => {\r\n    return menu.map((item, key) => {\r\n      const type = item.type;\r\n      if (type === menuType) {\r\n        const price = parseFloat(item.price).toFixed(2);\r\n        const ingredients = item.ingredients;\r\n        let ingList = '';\r\n        ingredients.map((ing, index) => {\r\n           return ingList += ing + \", \";\r\n        });\r\n        let allergens = \"\";\r\n        if (item.allergens[0]) {\r\n          allergens = `(Allergens: ${item.allergens})`\r\n        }\r\n        return (\r\n          <tr key={key}>\r\n            <td><input name='quantity' type='number' min='0' style={{ width: '40px' }}\r\n              value={data.values.quantity[key]} onChange={data.handleChange}\r\n            ></input> </td>\r\n            <td>{item.number}</td>\r\n            <td style={{ textAlign: 'left' }} >\r\n              <div>\r\n                {item.dish} {allergens}\r\n              </div>\r\n              <div style={{ fontStyle: 'italic' }}>\r\n                (Ingredients: {ingList})\r\n              </div>\r\n            </td>\r\n            <td>{price}</td>\r\n            <td><button type='submit' onClick={() => takeaway(item.number, item.dish, data.values.quantity, item.price, item._id)}>Add to Cart</button></td>\r\n          </tr>\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  const takeaway = async (item, dish, quantity, price, id) => {\r\n    if (!quantity) {\r\n      alert('Error: Quantity is missing!')\r\n    }\r\n\r\n    else {\r\n      let orders = await JSON.parse(localStorage.getItem('orders'));\r\n\r\n      if (orders == null) {\r\n        orders = []; //if no data found, set an empty array\r\n      }\r\n\r\n      const total = quantity * price;\r\n      const order = { id: id, item: item, dish: dish, quantity: quantity, price: price, total: total }\r\n      orders.push(order)\r\n      localStorage.setItem('orders', JSON.stringify(orders));\r\n      alert('Item added to the basket!');\r\n      \r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container>\r\n        <Button>\r\n          <Basket />\r\n        </Button>\r\n        <Content>\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th style={{ width: '80px' }}>Quantity</th>\r\n                <th style={{ width: '80px' }}>Item</th>\r\n                <th style={{ width: '400px' }}>Description</th>\r\n                <th style={{ width: '100px' }}>Price (€)</th>\r\n                <th style={{ width: '120px' }}></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <Title>\r\n                <td></td>\r\n                <td></td>\r\n                <td > Soups </td>\r\n                <td></td>\r\n                <td></td>\r\n              </Title>\r\n              {types('soup')}\r\n              <Title>\r\n                <td></td>\r\n                <td></td>\r\n                <td > Starters </td>\r\n                <td></td>\r\n                <td></td>\r\n              </Title>\r\n              {types('starter')}\r\n              <Title>\r\n                <td></td>\r\n                <td></td>\r\n                <td > Satay </td>\r\n                <td></td>\r\n                <td></td>\r\n              </Title>\r\n              {types('satay')}\r\n              <Title>\r\n                <td></td>\r\n                <td></td>\r\n                <td > Curry </td>\r\n                <td></td>\r\n                <td></td>\r\n              </Title>\r\n              {types('curry')}\r\n              <Title>\r\n                <td></td>\r\n                <td></td>\r\n                <td > Rice </td>\r\n                <td></td>\r\n                <td></td>\r\n              </Title>\r\n              {types('rice')}\r\n              <Title>\r\n                <td></td>\r\n                <td></td>\r\n                <td > Chow Mein </td>\r\n                <td></td>\r\n                <td></td>\r\n              </Title>\r\n              {types('mein')}\r\n              <Title>\r\n                <td></td>\r\n                <td></td>\r\n                <td > Sides </td>\r\n                <td></td>\r\n                <td></td>\r\n              </Title>\r\n              {types('side')}\r\n            </tbody>\r\n          </Table>\r\n        </Content>\r\n      </Container>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Menu;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\form.js",["217"],"import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\n\r\nconst Form = (callback) => {\r\n\r\n    const data = useFormik({\r\n        initialValues: {\r\n            quantity: '',\r\n            user: '',\r\n        },\r\n\r\n        validationSchema: Yup.object().shape({\r\n            quantity: Yup.number().required('Quantity is required'),\r\n            user: Yup.string().required('You must be logged in')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            console.log(data.values);\r\n        }\r\n    });\r\n\r\n    return {\r\n        data,\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\orders.js",["218","219"],"import React, { useState, createContext } from 'react';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport { Modal, Button, Table, ButtonGroup, FormCheck } from 'react-bootstrap';\r\nimport { FiEye } from 'react-icons/fi';\r\nimport api from '../../services/api';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Order = (props) => {\r\n    const id = props.id;\r\n    const [show, setShow] = useState(false);\r\n    const [orders, setOrders] = useState([]);\r\n  \r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    \r\n\r\n    const getOrder = async () => {\r\n        const result = await api.get(`/delivery/${id}`);\r\n        setOrders(result.data.deliveryList);\r\n        localStorage.removeItem('print');\r\n        handleShow();\r\n    }\r\n\r\n    const HandleOrders = () => {\r\n        return orders.map((object, key) => {\r\n            const order = object.orders;\r\n            const price = object.price;\r\n            const comment = object.comment;\r\n\r\n            const itemList = order.map((value, key) => {\r\n                return (\r\n                    <tr key={key}>{value.item}</tr>);\r\n            });\r\n\r\n            const dishList = order.map((value, key) => {\r\n                return (\r\n                    <tr key={key}>{value.dish}</tr>);\r\n            });\r\n\r\n            const quantList = order.map((value, key) => {\r\n                return (\r\n                    <tr key={key}>{value.quantity}</tr>);\r\n            });\r\n\r\n            return (\r\n                <tbody key={key}>\r\n                    <tr>\r\n                        <td>{itemList}</td>\r\n                        <td>{dishList}</td>\r\n                        <td>{quantList}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td>€ {price}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td></td>\r\n                        <td>{comment}</td>\r\n                        <td></td>\r\n                    </tr>\r\n                </tbody>\r\n            )\r\n        })\r\n    }\r\n\r\n    const HandleEmptyBasket = () => {\r\n        return (<tr>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>)\r\n    }\r\n\r\n    const printOrder = async () => {\r\n        const print = await localStorage.setItem('print', JSON.stringify(orders));\r\n        return print;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FormCheck type=\"checkbox\" onChange={() => getOrder()} style={{ marginLeft: '5px', width: '100%', height: '10%' }}>\r\n                </FormCheck>\r\n\r\n            <Modal show={show} onHide={handleClose} size='lg'>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Order:</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Table responsive >\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{ width: '50px' }}>Item</th>\r\n                                <th style={{ width: '300px' }}>Description</th>\r\n                                <th style={{ width: '50px' }}>Quantity</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        {orders && orders.length > 0 ? <HandleOrders /> : <HandleEmptyBasket />}\r\n\r\n                    </Table>\r\n                    <p></p>\r\n                    <p style={{ fontSize: '16px', fontWeight: 'bold', backgroundColor: '#D3D3D3' }}></p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <ButtonGroup>\r\n                        <Button variant=\"primary\" style={{ marginRight: '50px' }} onClick={printOrder}><Link to='/invoice' \r\n                        style={{color: '#fff'}}> Invoice</Link>\r\n                             </Button>\r\n                        <Button variant=\"dark\" onClick={handleClose} style={{ marginRight: '50px' }} >\r\n                            Close </Button>\r\n                    </ButtonGroup>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Order;\r\n","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\print.js",["220"],"import React, { useRef } from 'react';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { ComponentToPrint } from './invoice';\r\n\r\nimport {  Test } from './test';\r\n\r\nconst Printer = () => {\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Button style={{marginTop: '10px'}} onClick={handlePrint}>Print Invoice</Button>\r\n      <ComponentToPrint ref={componentRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Printer;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\style.js",[],["221","222"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\invoice.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\basket.js",["223","224"],"import React, { useState } from 'react';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Modal, Button, Table, DropdownButton, Dropdown, ButtonGroup } from 'react-bootstrap';\r\nimport { RiShoppingBasketLine } from 'react-icons/ri';\r\n\r\n\r\nconst Basket = () => {\r\n    const [show, setShow] = useState(false);\r\n    const [orders, setOrders] = useState([]);\r\n    const [totalPrice, setTotalPrice] = useState();\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const getOrders = async () => {\r\n        let order = await JSON.parse(localStorage.getItem('orders'));\r\n        setOrders(order);\r\n        if (order) {\r\n            const total = order.reduce(function (tot, arr) {\r\n                return setTotalPrice(parseFloat(tot + arr.total).toFixed(2));\r\n            }, 0);\r\n        }\r\n        handleShow();\r\n    }\r\n\r\n    const getLastOrder = async () => {\r\n        let order = await JSON.parse(localStorage.getItem('lastOrders'));\r\n        setOrders(order);\r\n        if (order) {\r\n            const total = order.reduce(function (tot, arr) {\r\n                return setTotalPrice(parseFloat(tot + arr.total).toFixed(2));\r\n            }, 0);\r\n        }\r\n        handleShow();\r\n    }\r\n\r\n    const HandleOrders = () => {\r\n         return orders.map((order, key) => {\r\n                const price = parseFloat(order.price).toFixed(2);\r\n                const total = parseFloat(order.total).toFixed(2);\r\n                return (\r\n                    <tr key={key}>\r\n                        <td>{order.item}</td>\r\n                        <td>{order.dish}</td>\r\n                        <td>{order.quantity}</td>\r\n                        <td>{price}</td>\r\n                        <td>{total}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n    }\r\n\r\n    const HandleEmptyBasket = () => {\r\n        return (<tr>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>)\r\n    }\r\n\r\n    const deleteOrder = () => {\r\n        localStorage.removeItem('orders');\r\n        setOrders(null);\r\n        setTotalPrice(null);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={getOrders}>\r\n                <RiShoppingBasketLine style={{ marginBottom: '5px' }} />  See Basket\r\n        </Button>\r\n\r\n            <Modal show={show} onHide={handleClose} size='lg'>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Order:</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Table responsive >\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{ width: '80px' }}>Item</th>\r\n                                <th style={{ width: '200px' }}>Description</th>\r\n                                <th style={{ width: '80px' }}>Quantity</th>\r\n                                <th style={{ width: '100px' }}>Price (€)</th>\r\n                                <th style={{ width: '100px' }}>Total (€)</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {orders && orders.length > 0 ? <HandleOrders /> : <HandleEmptyBasket />}\r\n                        </tbody>\r\n                    </Table>\r\n                    <p></p>\r\n                    <p style={{ fontSize: '16px', fontWeight: 'bold', backgroundColor: '#D3D3D3' }}>Final Total:  €  {totalPrice} </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <ButtonGroup>\r\n                    <Button variant=\"danger\" onClick={deleteOrder} style={{marginRight: '50px'}}>\r\n                        Delete Order</Button>\r\n                    <Button variant=\"dark\" onClick={getLastOrder} style={{marginRight: '50px'}} >\r\n                        See Last Order </Button>\r\n                    <DropdownButton variant=\"primary\" title='Checkout' disabled={ orders ? false : true}>\r\n                        <Dropdown.Item> <Link to='/takeout'> Takeout </Link></Dropdown.Item>\r\n                        <Dropdown.Item> <Link to='/delivery'> Delivery </Link></Dropdown.Item>\r\n                    </DropdownButton>\r\n                    </ButtonGroup>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Basket;\r\n","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\test.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\delivery.js",["225","226"],"import React, { useEffect } from 'react';\r\nimport { Background, Container, Content } from './style';\r\nimport Form from './form';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\nimport dateFnsFormat from 'date-fns/format';\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from '../../styles/header';\r\n\r\n\r\n\r\nconst Takeaway = () => {\r\n\r\n    let user;\r\n\r\n    let order;\r\n\r\n    const { data, submit } = Form();\r\n\r\n    useEffect(() => {\r\n\r\n        user = JSON.parse(sessionStorage.getItem('user'));\r\n        order = JSON.parse(localStorage.getItem('orders'));\r\n\r\n        if (!order) {\r\n            order = JSON.parse(localStorage.getItem('lastOrders'));\r\n        }\r\n\r\n        if (user.status === 'costumer') {\r\n            data.setFieldValue('user', user.email);\r\n            data.setFieldValue('name', user.name);\r\n            data.setFieldValue('email', user.email);\r\n            if (user.phoneNumber) {\r\n                data.setFieldValue('phoneNumber', user.phoneNumber);\r\n            }\r\n        }\r\n\r\n        data.setFieldValue('user', user._id);\r\n        data.setFieldValue('lastOrder', order);\r\n\r\n        reduceOrder();\r\n\r\n    }, [order]);\r\n\r\n    const reduceOrder = () => {\r\n        const pair = []\r\n        order.map((key) => {\r\n            const dish = key.id;\r\n            const quantity = key.quantity;\r\n            pair.push({ dish: dish, quantity: quantity });\r\n            return pair;\r\n        });\r\n\r\n        return data.setFieldValue('order', pair);\r\n    }\r\n\r\n\r\n    function formatDate(date, format, locale) {\r\n        return dateFnsFormat(date, format, { locale });\r\n    }\r\n    const FORMAT = 'dd/MM/yyyy';\r\n\r\n\r\n    function handleDayChange(day) {\r\n        let selectedDay = new Date(day);\r\n        selectedDay = selectedDay.getDate() + '/' + selectedDay.getMonth() + 1 + '/' + selectedDay.getFullYear();\r\n        data.setFieldValue('date', selectedDay);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Container>\r\n                <Content>\r\n                    <div style={{ textAlign: 'center', fontSize: '16px', fontWeight: 'bold', color: '#8B0000', marginTop: '60px' }}>\r\n                        {submit !== null &&\r\n                            <p>{submit ? submit : null}</p>\r\n                        }\r\n                        {data.errors.user && data.touched.user && (\r\n                            <p>{data.errors.user}</p>)}\r\n                        {data.errors.order && data.touched.order && (\r\n                            <p>{data.errors.order}</p>)}\r\n                    </div>\r\n                    <form onSubmit={data.handleSubmit}>\r\n                        <h1>Ordering Delivery: </h1>\r\n                        <DayPickerInput value={data.values.date} style={{ width: '100%' }}\r\n                            formatDate={formatDate} format={FORMAT} dayPickerProps={{\r\n                                modifiers: {\r\n                                    disabled: [{ daysOfWeek: [2] }, { before: new Date() }]\r\n                                }\r\n                            }}\r\n                            inputProps={{ readOnly: true }} onDayChange={handleDayChange} />\r\n                        {data.errors.date && data.touched.date && (\r\n                            <p>{data.errors.date}</p>)}\r\n                        <input name='name' type='text' placeholder='Name' value={data.values.name} onChange={data.handleChange} />\r\n                        {data.errors.name && data.touched.name && (\r\n                            <p>{data.errors.name}</p>)}\r\n                        <input name='phoneNumber' type='text' placeholder='Phone number' value={data.values.phoneNumber} onChange={data.handleChange} />\r\n                        {data.errors.phoneNumber && data.touched.phoneNumber && (\r\n                            <p>{data.errors.phoneNumber}</p>)}\r\n                        <input name='address' type='text' placeholder='Address' value={data.values.address} onChange={data.handleChange} />\r\n                        {data.errors.address && data.touched.address && (\r\n                            <p>{data.errors.address}</p>)}\r\n                        <input name='comment' type='text' placeholder='Comment' value={data.values.comment} onChange={data.handleChange} />\r\n                        <button type='submit'> Order </button>\r\n                    </form>\r\n                    <Link to='/menu' style={{ color: '#0000FF' }}>Back to Menu</Link>\r\n                </Content>\r\n                <Background />\r\n            </Container>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Takeaway;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\form.js",["227","228"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\n\r\nconst Form = (callback) => {\r\n\r\n    const [submit, setSubmit] = useState(false);\r\n\r\n    let today = new Date();\r\n\r\n    today = today.getDate()+'/'+today.getMonth()+1+'/'+today.getFullYear();\r\n\r\n    const data = useFormik({\r\n        initialValues: {\r\n            date: today,\r\n            name: '',\r\n            phoneNumber: '',\r\n            address: '',\r\n            comment: '',\r\n            user: '',\r\n            order: '',\r\n            lastOrder: '',\r\n        },\r\n\r\n        validationSchema: Yup.object().shape({\r\n            name: Yup.string().required('Name is required').min(3, 'At least 3 characters'),\r\n            phoneNumber: Yup.number().required('Phone number is required'),\r\n            address: Yup.string().required('Address is required'),\r\n            user: Yup.string().required('You must be logged in'),\r\n            order: Yup.array().required('There is no order')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            addOrder();\r\n        }\r\n\r\n    });\r\n\r\n    const addOrder = async () => {\r\n        setSubmit('Creating order...')\r\n        let err;\r\n        try {\r\n            const res = await api.post('/takeaway', data.values);\r\n            setSubmit(\"Order created successfully.\");\r\n            localStorage.setItem('lastOrders', JSON.stringify(data.values.lastOrder));\r\n            localStorage.removeItem('orders');\r\n        } catch (e) {\r\n            if (e.response) {\r\n                err = e.response;\r\n                const { error } = err;\r\n                setSubmit(error);\r\n            } else {\r\n                setSubmit(\"Some error has occured. Please try again.\");\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return {\r\n        data,\r\n        submit\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\style.js",[],{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":13},{"ruleId":"233","severity":1,"message":"237","line":37,"column":19,"nodeType":"235","messageId":"236","endLine":37,"endColumn":22},{"ruleId":"238","severity":1,"message":"239","line":23,"column":21,"nodeType":"240","endLine":23,"endColumn":32},{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":13},{"ruleId":"241","severity":1,"message":"242","line":33,"column":8,"nodeType":"243","endLine":33,"endColumn":16,"suggestions":"244"},{"ruleId":"233","severity":1,"message":"245","line":36,"column":20,"nodeType":"235","messageId":"236","endLine":36,"endColumn":25},{"ruleId":"233","severity":1,"message":"246","line":37,"column":15,"nodeType":"235","messageId":"236","endLine":37,"endColumn":19},{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":13},{"ruleId":"233","severity":1,"message":"237","line":27,"column":19,"nodeType":"235","messageId":"236","endLine":27,"endColumn":22},{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":13},{"ruleId":"233","severity":1,"message":"247","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":25},{"ruleId":"233","severity":1,"message":"248","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":11},{"ruleId":"229","replacedBy":"249"},{"ruleId":"231","replacedBy":"250"},{"ruleId":"241","severity":1,"message":"251","line":12,"column":8,"nodeType":"243","endLine":12,"endColumn":10,"suggestions":"252"},{"ruleId":"241","severity":1,"message":"253","line":22,"column":16,"nodeType":"254","endLine":22,"endColumn":58},{"ruleId":"241","severity":1,"message":"255","line":23,"column":17,"nodeType":"254","endLine":23,"endColumn":59},{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":13},{"ruleId":"233","severity":1,"message":"237","line":44,"column":19,"nodeType":"235","messageId":"236","endLine":44,"endColumn":22},{"ruleId":"241","severity":1,"message":"253","line":19,"column":16,"nodeType":"254","endLine":19,"endColumn":58},{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":13},{"ruleId":"233","severity":1,"message":"237","line":41,"column":19,"nodeType":"235","messageId":"236","endLine":41,"endColumn":22},{"ruleId":"241","severity":1,"message":"253","line":24,"column":16,"nodeType":"254","endLine":24,"endColumn":58},{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":13},{"ruleId":"256","severity":1,"message":"257","line":26,"column":33,"nodeType":"258","messageId":"259","endLine":26,"endColumn":35},{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":13},{"ruleId":"233","severity":1,"message":"260","line":1,"column":27,"nodeType":"235","messageId":"236","endLine":1,"endColumn":40},{"ruleId":"233","severity":1,"message":"261","line":4,"column":10,"nodeType":"235","messageId":"236","endLine":4,"endColumn":15},{"ruleId":"233","severity":1,"message":"262","line":7,"column":11,"nodeType":"235","messageId":"236","endLine":7,"endColumn":15},{"ruleId":"229","replacedBy":"263"},{"ruleId":"231","replacedBy":"264"},{"ruleId":"233","severity":1,"message":"265","line":20,"column":19,"nodeType":"235","messageId":"236","endLine":20,"endColumn":24},{"ruleId":"233","severity":1,"message":"265","line":31,"column":19,"nodeType":"235","messageId":"236","endLine":31,"endColumn":24},{"ruleId":"241","severity":1,"message":"253","line":22,"column":16,"nodeType":"254","endLine":22,"endColumn":58},{"ruleId":"241","severity":1,"message":"255","line":23,"column":17,"nodeType":"254","endLine":23,"endColumn":59},{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":13},{"ruleId":"233","severity":1,"message":"237","line":46,"column":19,"nodeType":"235","messageId":"236","endLine":46,"endColumn":22},"no-native-reassign",["266"],"no-negated-in-lhs",["267"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'res' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data.values'. Either include it or remove the dependency array.","ArrayExpression",["268"],"'Login' is defined but never used.","'post' is assigned a value but never used.","'useState' is defined but never used.","'api' is defined but never used.",["266"],["267"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["269"],"Assignments to the 'user' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'order' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'createContext' is defined but never used.","'FiEye' is defined but never used.","'Test' is defined but never used.",["266"],["267"],"'total' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},"Update the dependencies array to be: [data.values, submit]",{"range":"274","text":"275"},"Update the dependencies array to be: [history]",{"range":"276","text":"277"},[814,822],"[data.values, submit]",[251,253],"[history]"]
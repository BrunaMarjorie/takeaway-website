[{"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\index.js":"1","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\App.js":"2","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\global.js":"3","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\header.js":"4","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\homepage\\homepage.js":"5","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\signUp.js":"6","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\signIn.js":"7","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\homepage\\style.js":"8","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\form.js":"9","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\style.js":"10","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\style.js":"11","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\form.js":"12","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\style.js":"13","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\api.js":"14","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\forgot.js":"15","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\style.js":"16","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\form.js":"17","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\forgot.js":"18","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\style.js":"19","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\form.js":"20","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\search.js":"21","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\logout.js":"22","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\takeaway.js":"23","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\form.js":"24","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\style.js":"25","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\booking.js":"26","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\style.js":"27","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\form.js":"28","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\staff.js":"29","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\form.js":"30","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\style.js":"31","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\menuList.js":"32","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\form.js":"33","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\orders.js":"34","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\print.js":"35","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\style.js":"36","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\invoice.js":"37","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\basket.js":"38","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\delivery.js":"39","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\form.js":"40","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\style.js":"41","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\menuHeader.js":"42","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\componentToPrint.js":"43","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\routes\\privateRoutes.js":"44","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\routes\\routes.js":"45"},{"size":198,"mtime":1610059905826,"results":"46","hashOfConfig":"47"},{"size":521,"mtime":1612047024463,"results":"48","hashOfConfig":"47"},{"size":369,"mtime":1611596227939,"results":"49","hashOfConfig":"47"},{"size":2326,"mtime":1612047279425,"results":"50","hashOfConfig":"47"},{"size":716,"mtime":1612017070310,"results":"51","hashOfConfig":"47"},{"size":3552,"mtime":1612020001423,"results":"52","hashOfConfig":"47"},{"size":2121,"mtime":1612019651736,"results":"53","hashOfConfig":"47"},{"size":876,"mtime":1611751122441,"results":"54","hashOfConfig":"47"},{"size":2106,"mtime":1612020101913,"results":"55","hashOfConfig":"47"},{"size":2195,"mtime":1610553897478,"results":"56","hashOfConfig":"47"},{"size":1745,"mtime":1611796091409,"results":"57","hashOfConfig":"47"},{"size":2206,"mtime":1612019815451,"results":"58","hashOfConfig":"47"},{"size":2197,"mtime":1610798918398,"results":"59","hashOfConfig":"47"},{"size":226,"mtime":1612048804834,"results":"60","hashOfConfig":"47"},{"size":1099,"mtime":1610556191933,"results":"61","hashOfConfig":"47"},{"size":2192,"mtime":1610556337189,"results":"62","hashOfConfig":"47"},{"size":1418,"mtime":1610557860345,"results":"63","hashOfConfig":"47"},{"size":1690,"mtime":1612016908543,"results":"64","hashOfConfig":"47"},{"size":2192,"mtime":1610556337189,"results":"65","hashOfConfig":"47"},{"size":1379,"mtime":1612017007609,"results":"66","hashOfConfig":"47"},{"size":1222,"mtime":1611236160554,"results":"67","hashOfConfig":"47"},{"size":291,"mtime":1612045865430,"results":"68","hashOfConfig":"47"},{"size":4812,"mtime":1612048465837,"results":"69","hashOfConfig":"47"},{"size":2114,"mtime":1612020370005,"results":"70","hashOfConfig":"47"},{"size":2333,"mtime":1611493431212,"results":"71","hashOfConfig":"47"},{"size":5517,"mtime":1612045708194,"results":"72","hashOfConfig":"47"},{"size":2326,"mtime":1611145433678,"results":"73","hashOfConfig":"47"},{"size":2095,"mtime":1612016657863,"results":"74","hashOfConfig":"47"},{"size":13762,"mtime":1612021879967,"results":"75","hashOfConfig":"47"},{"size":1228,"mtime":1612044642534,"results":"76","hashOfConfig":"47"},{"size":3530,"mtime":1611245613721,"results":"77","hashOfConfig":"47"},{"size":5469,"mtime":1612019482764,"results":"78","hashOfConfig":"47"},{"size":655,"mtime":1612018894716,"results":"79","hashOfConfig":"47"},{"size":5686,"mtime":1612048161420,"results":"80","hashOfConfig":"47"},{"size":576,"mtime":1612046364519,"results":"81","hashOfConfig":"47"},{"size":854,"mtime":1611620596004,"results":"82","hashOfConfig":"47"},{"size":5160,"mtime":1612049482611,"results":"83","hashOfConfig":"47"},{"size":6373,"mtime":1612018822262,"results":"84","hashOfConfig":"47"},{"size":5233,"mtime":1612048503634,"results":"85","hashOfConfig":"47"},{"size":2240,"mtime":1612049060080,"results":"86","hashOfConfig":"47"},{"size":2326,"mtime":1611621266987,"results":"87","hashOfConfig":"47"},{"size":2865,"mtime":1612047275412,"results":"88","hashOfConfig":"47"},{"size":233,"mtime":1612046281771,"results":"89","hashOfConfig":"47"},{"size":1030,"mtime":1612045978830,"results":"90","hashOfConfig":"47"},{"size":1672,"mtime":1612046241600,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"hrxr0x",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\index.js",[],["193","194"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\App.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\global.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\header.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\homepage\\homepage.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\signUp.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\signIn.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\homepage\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\form.js",["195","196"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\n\r\n\r\nconst Form = (callback) => {\r\n    const [submit, setSubmit] = useState(null);\r\n    const [loading, setLoading] = useState(null);\r\n\r\n    //set inicial values\r\n    const data = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            phoneNumber: '',\r\n            email: '',\r\n            password: '',\r\n            confPassword: ''\r\n        },\r\n\r\n        //validate inputs\r\n        validationSchema: Yup.object().shape({\r\n            name: Yup.string().min(2, 'Minimum 2 characters').required('Name is required'),\r\n            phoneNumber: Yup.number().required('Phone number is required'),\r\n            email: Yup.string().required('Email is required').email('Invalid format'),\r\n            password: Yup.string().required('Password is required').min(6, 'Password must have at least 6 characters'),\r\n            confPassword: Yup.string().oneOf([Yup.ref('password')], 'Password does not match').required('Confirm Password is required')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            //create user if all information is correctly passed\r\n            createUser();\r\n        }\r\n\r\n    });\r\n\r\n\r\n    const createUser = async () => {\r\n        //set loading message\r\n        setLoading(\"Loading...\");\r\n        let err;\r\n        try {\r\n            //call API\r\n            const res = await api.post('/users/register', data.values);\r\n            //set message if successful\r\n            setLoading(null);\r\n            setSubmit(\"Account created successfully.\");\r\n        } catch (e) {\r\n            if (e.response) {\r\n                err = e.response.data;\r\n                const { error } = err;\r\n                //set error message\r\n                setLoading(error);\r\n            } else {\r\n                //set error message\r\n                setLoading(\"Some error has occured. Please try again.\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n        submit,\r\n        loading,\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signUp\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\form.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\signIn\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\api.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\forgot.js",["197"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\ForgotPassword\\form.js",["198","199","200","201"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\forgot.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\forgotPassword\\form.js",["202"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\n\r\n\r\n\r\nconst Form = (callback) => {\r\n    const [submit, setSubmit] = useState(false);\r\n\r\n    //set inicial values\r\n    const data = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n\r\n        //validate inputs\r\n        validationSchema: Yup.object().shape({\r\n            email: Yup.string().required('Email is required').email('Invalid format'),\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            //send email if information is correctly passed\r\n            forgot();\r\n        }\r\n    });\r\n\r\n    const forgot = async () => {\r\n        //set loading message\r\n        setSubmit('Loading...');\r\n        try {\r\n            //call API\r\n            const res = await api.post('/forgot/password', data.values);\r\n            if (res.data.error) {\r\n                //set message if error\r\n                setSubmit(res.data.error); \r\n             } else {\r\n                 //set message if successful\r\n                 setSubmit(\"Please check your mailbox.\");\r\n             }\r\n        } catch (e) {\r\n            //set message if error\r\n            setSubmit(\"Some error has occured. Please try again.\");\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return {\r\n        data,\r\n        submit,\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\search.js",["203","204","205"],"import React, { useState } from 'react';\r\nimport api from '../../services/api';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\nconst Search = () => {\r\n\r\n    const data = useFormik({\r\n        initialValues: {\r\n            search: '',\r\n        },\r\n\r\n        validationSchema: Yup.object().shape({\r\n            search: Yup.string().min(3, 'Search must have at least 3 characters').required('Item is required'),\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            searchItem(data.values.search);\r\n\r\n        }\r\n    });\r\n\r\n    const searchItem = async (search) => {\r\n        const filter = search;\r\n        const table = document.getElementById('myTable');\r\n        console.log(table);\r\n        const tr = table.getElementsByTagName(\"tr\");\r\n        for (var i = 0; i < tr.length; i++) {\r\n            const td = tr[i].getElementsByTagName(\"td\")[0];\r\n            if (td) {\r\n                const txtValue = td.textContent || td.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n    }\r\n\r\n}\r\n\r\nexport default Search;",["206","207"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\logout.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\takeaway.js",["208"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\form.js",["209","210"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\n\r\nconst Form = (callback) => {\r\n\r\n    const [submit, setSubmit] = useState(false);\r\n\r\n    //get present date\r\n    let today = new Date();\r\n    today = today.getDate()+'/'+today.getMonth()+1+'/'+today.getFullYear();\r\n\r\n    //set inicial values\r\n    const data = useFormik({\r\n        initialValues: {\r\n            //set default date\r\n            date: today,\r\n            name: '',\r\n            phoneNumber: '',\r\n            comment: '',\r\n            user: '',\r\n            order: '',\r\n            lastOrder: '',\r\n        },\r\n\r\n        //validate inputs\r\n        validationSchema: Yup.object().shape({\r\n            name: Yup.string().required('Name is required').min(3, 'At least 3 characters'),\r\n            phoneNumber: Yup.number().required('Phone number is required'),\r\n            user: Yup.string().required('You must be logged in'),\r\n            order: Yup.array().required('There is no order')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            //create order if all information is correctly passed\r\n            addOrder();\r\n        }\r\n\r\n    });\r\n\r\n    const addOrder = async () => {\r\n        //set loading message\r\n        setSubmit('Creating order...')\r\n        let err;\r\n        try {\r\n            //call API\r\n            const res = await api.post('/takeaway', data.values);\r\n            //set message if successful\r\n            setSubmit(\"Order created successfully.\");\r\n            //clean local storage\r\n            localStorage.removeItem('orders');\r\n        } catch (e) {\r\n            if (e.response) {\r\n                err = e.response;\r\n                const { error } = err;\r\n                //set error message\r\n                setSubmit(error);\r\n            } else {\r\n                //set error message\r\n                setSubmit(\"Some error has occured. Please try again.\");\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return {\r\n        data,\r\n        submit\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\takeaway\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\booking.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\booking\\form.js",["211","212"],"import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport api from '../../services/api';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\n\r\nconst Calendar = (callback) => {\r\n    const [submit, setSubmit] = useState(false);\r\n\r\n    //set inicial values\r\n    const data = useFormik({\r\n        initialValues: {\r\n            date: '',\r\n            time: '',\r\n            number: '',\r\n            name: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            userID: '',\r\n        },\r\n\r\n        //validate inputs\r\n        validationSchema: Yup.object().shape({\r\n            date: Yup.string().required('Date is required'),\r\n            time: Yup.string().required('Time is required'),\r\n            number: Yup.number().required('Number of people is required'),\r\n            name: Yup.string().required('Name is required').min(3, 'At least 3 characters'),\r\n            email: Yup.string().required('Email is required').email('Invalid format'),\r\n            phoneNumber: Yup.number().required('Phone number is required'),\r\n            user: Yup.string().required('You must be logged in')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            //create booking if all information is correctly passed\r\n            addBooking();\r\n        }\r\n\r\n    });\r\n\r\n    const addBooking = async () => {\r\n        //set loading message\r\n        setSubmit('Loading...');\r\n        let err;\r\n        try {\r\n            //call API\r\n            const res = await api.post(`/bookings`, data.values);\r\n            //set message if successful\r\n            setSubmit(\"Table successfully booked.\");\r\n        } catch (e) {\r\n            if (e.response) {\r\n                err = e.response.data;\r\n                const { error } = err;\r\n                //set error message\r\n                setSubmit(error);\r\n            } else {\r\n                //set error message\r\n                setSubmit(\"Some error has occured. Please try again.\");\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return {\r\n        data,\r\n        submit\r\n    }\r\n\r\n}\r\n\r\nexport default Calendar;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\staff.js",["213"],"import React, { useState } from 'react';\r\nimport { Bookings, Container, ContainerSec, Content, Takeaway } from './style';\r\nimport Form from './form';\r\nimport 'react-day-picker/lib/style.css';\r\nimport Header from '../../styles/menuHeader';\r\nimport api from '../../services/api';\r\nimport Order from './orders';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Row, Col, Table } from 'react-bootstrap';\r\n\r\n\r\nconst Staff = () => {\r\n\r\n    //formik form\r\n    const { data } = Form();\r\n\r\n    const [bookings, setBookings] = useState(null);\r\n    const [takeaways, setTakeaways] = useState(null);\r\n    const [deliveries, setDeliveries] = useState(null);\r\n\r\n    //collect user information\r\n    const user = JSON.parse(sessionStorage.getItem('user'));\r\n\r\n    //collect waiting time information\r\n    const waitingTime = async () => {\r\n        const res = await api.get('/waitingTime');\r\n        data.setFieldValue('takeaway', res.data.takeawayTime);\r\n        data.setFieldValue('delivery', res.data.deliveryTime);\r\n    }\r\n\r\n    //redirect if user is a customer \r\n    if (user.status === 'customer') {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    //call API to get all the bookings\r\n    const bookingsList = async () => {\r\n        const result = await api.get('/bookings');\r\n        setBookings(result.data.bookings);\r\n    }\r\n\r\n    //call API to get all the takeout orders\r\n    const takeawayList = async () => {\r\n        const result = await api.get('/takeaway');\r\n        setTakeaways(result.data.takeawayList);\r\n    }\r\n\r\n    //call API to get all the delivery orders\r\n    const deliveryList = async () => {\r\n        const result = await api.get('/delivery');\r\n        setDeliveries(result.data.deliveryList);\r\n    }\r\n\r\n    //close bookings view\r\n    const retrieveBooking = () => {\r\n        setBookings(null);\r\n    }\r\n\r\n    //close takeaway view\r\n    const retrieveTakeaway = () => {\r\n        setTakeaways(null);\r\n    }\r\n\r\n    //close delivery view\r\n    const retrieveDelivery = () => {\r\n        setDeliveries(null);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Container>\r\n                <Col>\r\n                    <ContainerSec>\r\n                        <Row>\r\n                            <Content>\r\n                                <form onSubmit={data.handleSubmit}>\r\n                                    <h1>Time: </h1>\r\n                                    <label> Takeaway time:\r\n                                        {/* select waiting time for takeaway  */}\r\n                                        <select name='takeaway'\r\n                                            value={data.values.takeaway}\r\n                                            onChange={data.handleChange}\r\n                                            onBlur={data.handleBlur}>\r\n                                            <option value='15min' label='15min' />\r\n                                            <option value='20min' label='20min' />\r\n                                            <option value='25min' label='25min' />\r\n                                            <option value='30min' label='30min' />\r\n                                            <option value='35min' label='35min' />\r\n                                            <option value='40min' label='40min' />\r\n                                            <option value='45min' label='45min' />\r\n                                            <option value='50min' label='50min' />\r\n                                            <option value='55min' label='55min' />\r\n                                            <option value='60min' label='60min' />\r\n                                        </select>\r\n                                    </label>\r\n                                    <label>\r\n                                        Delivery time:\r\n                                        {/* select waiting time for delivery  */}\r\n                                        <select name='delivery'\r\n                                            value={data.values.delivery}\r\n                                            onChange={data.handleChange}\r\n                                            onBlur={data.handleBlur}>\r\n                                            <option value='30min' label='30min' />\r\n                                            <option value='40min' label='40min' />\r\n                                            <option value='45min' label='45min' />\r\n                                            <option value='50min' label='50min' />\r\n                                            <option value='60min' label='60min' />\r\n                                            <option value='80min' label='80min' />\r\n                                            <option value='90min' label='90min' />\r\n                                        </select>\r\n                                    </label>\r\n                                    <button type='submit'> Update </button>\r\n                                </form>\r\n                            </Content>\r\n                        </Row>\r\n                        <Row>\r\n                            <Bookings>\r\n                                <form>\r\n                                    <h1>Bookings </h1>\r\n                                    <Row>\r\n                                        {/* get bookings  */}\r\n                                        <button type='button' onClick={bookingsList}>\r\n                                            Bookings </button>\r\n                                        {/* retrieve bookings  */}\r\n                                        <button type='button' onClick={retrieveBooking}>\r\n                                            Retrieve </button>\r\n\r\n                                    </Row>\r\n                                    {/* display bookings  */}\r\n                                    <div style={{ overflow: 'auto', maxHeight: '200px' }}>\r\n                                        <Table style={{ maxWidth: '350px', marginLeft: '10px', fontSize: '14px' }}>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th style={{ width: '20px' }}>Name</th>\r\n                                                    <th style={{ width: '5px' }}>Date</th>\r\n                                                    <th style={{ width: '5px' }}>Time</th>\r\n                                                    <th style={{ width: '5px' }}>People</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            {/* iterate through bookings array  */}\r\n                                            {bookings &&\r\n                                                bookings.map((booking, index) => {\r\n                                                    let date = new Date(booking.date);\r\n                                                    let time;\r\n                                                    time = date.getHours();\r\n                                                    date = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\r\n                                                    return (\r\n                                                        <tbody>\r\n                                                            <tr key={index}>\r\n                                                                <th style={{ fontWeight: '300' }}>{booking.name}</th>\r\n                                                                <th style={{ fontWeight: '300' }}>{date}</th>\r\n                                                                <th style={{ fontWeight: '300' }}>{time}h</th>\r\n                                                                <th style={{ fontWeight: '300' }}>{booking.numPeople}</th>\r\n                                                            </tr>\r\n                                                        </tbody>\r\n                                                    );\r\n                                                })}\r\n                                        </Table>\r\n                                    </div>\r\n                                </form>\r\n                            </Bookings>\r\n                        </Row>\r\n                    </ContainerSec>\r\n                </Col>\r\n                <Col>\r\n                    <Takeaway>\r\n                        <form>\r\n                            <h1>Takeaway</h1>\r\n                            <Row>\r\n                                {/* get takeout orders  */}\r\n                                <button type='button' onClick={takeawayList}>\r\n                                    Orders </button>\r\n                                {/* retrieve takeout orders  */}\r\n                                <button type='button' onClick={retrieveTakeaway}>\r\n                                    Retrieve </button>\r\n                            </Row>\r\n                            {/* display orders  */}\r\n                            <div style={{ overflow: 'auto', maxHeight: '350px' }}>\r\n                                <Table style={{ width: '100%', maxWidth: '500px', fontSize: '14px' }}>\r\n                                    <thead>\r\n                                        <tr style={{ position: 'sticky' }}>\r\n                                            <th style={{ width: '50px' }}></th>\r\n                                            <th style={{ width: '150px' }}>Name</th>\r\n                                            <th style={{ width: '150px' }}>Time</th>\r\n                                            <th style={{ width: '150px' }}>Paid</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    {/* iterate through takeaway array  */}\r\n                                    {takeaways &&\r\n                                        takeaways.map((takeaway, key) => {\r\n                                            return (\r\n                                                <tbody>\r\n                                                    <tr key={key}>\r\n                                                        <th><Order id={takeaway._id} type={'takeaway'} /></th>\r\n                                                        <th style={{ fontWeight: '300' }}>{takeaway.customer}</th>\r\n                                                        <th style={{ fontWeight: '300' }}>{takeaway.time}</th>\r\n                                                        <th style={{ fontWeight: '300' }}>{takeaway.paid}</th>\r\n                                                    </tr>\r\n                                                    <tr></tr>\r\n                                                </tbody>\r\n                                            );\r\n                                        })}\r\n                                </Table>\r\n                            </div>\r\n                        </form>\r\n                    </Takeaway>\r\n                </Col>\r\n                <Col>\r\n                    <Takeaway>\r\n                        <form>\r\n                            <h1>Delivery</h1>\r\n                            <Row>\r\n                                {/* get delivery orders  */}\r\n                                <button type='button' onClick={deliveryList}>\r\n                                    Orders </button>\r\n                                {/* retrieve delivery orders  */}\r\n                                <button type='button' onClick={retrieveDelivery}>\r\n                                    Retrieve </button>\r\n                            </Row>\r\n                            {/* display delivery orders  */}\r\n                            <div style={{ overflow: 'auto', maxHeight: '350px' }}>\r\n                                <Table style={{ width: '100%', maxWidth: '500px', fontSize: '14px' }}>\r\n                                    <thead>\r\n                                        <tr style={{ position: 'sticky' }}>\r\n                                            <th style={{ width: '50px' }}></th>\r\n                                            <th style={{ width: '150px' }}>Address</th>\r\n                                            <th style={{ width: '150px' }}>Time</th>\r\n                                            <th style={{ width: '150px' }}>Paid</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    {/* iterate through delivery array  */}\r\n                                    {deliveries &&\r\n                                        deliveries.map((delivery, item) => {\r\n                                            return (\r\n                                                <tbody>\r\n                                                    <tr key={item}>\r\n                                                        <th><Order id={delivery._id} type={'delivery'} /></th>\r\n                                                        <th style={{ fontWeight: '300' }}>{delivery.address}</th>\r\n                                                        <th style={{ fontWeight: '300' }}>{delivery.time}</th>\r\n                                                        <th style={{ fontWeight: '300' }}>{delivery.paid}</th>\r\n\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            );\r\n                                        })}\r\n                                </Table>\r\n                            </div>\r\n                        </form>\r\n                    </Takeaway>\r\n                </Col>\r\n            </Container>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Staff;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\form.js",["214","215"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\menuList.js",["216"],"import React from 'react';\r\nimport { Container, Content, Title } from '../menu/style';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Header from '../../styles/menuHeader';\r\nimport Form from './form';\r\n\r\n\r\n\r\nconst Menu = () => {\r\n\r\n  //collect menu list\r\n  const menu = JSON.parse(localStorage.getItem('menuList'));\r\n\r\n  //formik form\r\n  const { data } = Form();\r\n\r\n  //if menu is not available, rediret user to homepage\r\n  try {\r\n    if (menu.length > 0) {\r\n    };\r\n  } catch (e) {\r\n    return <Redirect to='/'></Redirect>\r\n  }\r\n\r\n  //separate items by type\r\n  const types = (menuType) => {\r\n    //iterate through menu array\r\n    return menu.map((item, key) => {\r\n      const type = item.type;\r\n      //check item type\r\n      if (type === menuType) {\r\n        //format number\r\n        const price = parseFloat(item.price).toFixed(2);      \r\n        //iterate through ingredients array\r\n        const ingredients = item.ingredients;\r\n        let ingList = '';\r\n        ingredients.map((ing, index) => {\r\n          return ingList += ing + \", \";\r\n        });\r\n        //format allergens\r\n        let allergens = \"\";\r\n        if (item.allergens[0]) {\r\n          allergens = `(Allergens: ${item.allergens})`\r\n        }\r\n        //return table\r\n        return (\r\n          <tr key={key}>\r\n            {/* collect quantity for the item  */}\r\n            <td><input name='quantity' type='number' min='0' style={{ width: '40px' }}\r\n              value={data.values.quantity[key]} onChange={data.handleChange}\r\n            ></input> </td>\r\n            {/* display item number  */}\r\n            <td>{item.number}</td>\r\n            <td style={{ textAlign: 'left' }} >\r\n              <div>\r\n                {/* display item description and allergens  */}\r\n                {item.dish} {allergens}\r\n              </div>\r\n              <div style={{ fontStyle: 'italic' }}>\r\n                {/* display item ingredients  */}\r\n                (Ingredients: {ingList})\r\n              </div>\r\n            </td>\r\n            {/* display item price  */}\r\n            <td>{price}</td>\r\n            {/* add item button  */}\r\n            <td><button style={{fontWeight: 'bold'}} type='submit' \r\n            onClick={() => takeaway(item.number, item.dish, data.values.quantity, item.price, item._id)}>\r\n              Add item</button></td>\r\n          </tr>\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  const takeaway = async (item, dish, quantity, price, id) => {\r\n    //alert if no quantity is set\r\n    if (!quantity) {\r\n      alert('Error: Quantity is missing!')\r\n    \r\n    } else {\r\n      //check if there is already any item in the basket\r\n      let orders = await JSON.parse(localStorage.getItem('orders'));\r\n\r\n      if (orders == null) {\r\n        orders = []; //if no data found, set an empty array\r\n      }\r\n\r\n      //calculate total;\r\n      const total = quantity * price;\r\n      //create an order object\r\n      const order = { id: id, item: item, dish: dish, quantity: quantity, price: price, total: total }\r\n      //push order to the array\r\n      orders.push(order);\r\n      //store the updated order\r\n      localStorage.setItem('orders', JSON.stringify(orders));\r\n      //send message to user\r\n      alert('Item added to the basket!');\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Header />\r\n      <Content>\r\n        {/* display menu table  */}\r\n        <Table responsive striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th style={{ width: '80px' }}>Quantity</th>\r\n              <th style={{ width: '80px' }}>Item</th>\r\n              <th style={{ width: '400px' }}>Description</th>\r\n              <th style={{ width: '100px' }}>Price (€)</th>\r\n              <th style={{ width: '120px' }}></th>\r\n            </tr>\r\n          </thead>\r\n          {/* display items by type  */}\r\n          <tbody>\r\n            <Title>\r\n              <td></td>\r\n              <td></td>\r\n              <td > Soups </td>\r\n              <td></td>\r\n              <td></td>\r\n            </Title>\r\n            {types('soup')}\r\n            <Title>\r\n              <td></td>\r\n              <td></td>\r\n              <td > Starters </td>\r\n              <td></td>\r\n              <td></td>\r\n            </Title>\r\n            {types('starter')}\r\n            <Title>\r\n              <td></td>\r\n              <td></td>\r\n              <td > Satay </td>\r\n              <td></td>\r\n              <td></td>\r\n            </Title>\r\n            {types('satay')}\r\n            <Title>\r\n              <td></td>\r\n              <td></td>\r\n              <td > Curry </td>\r\n              <td></td>\r\n              <td></td>\r\n            </Title>\r\n            {types('curry')}\r\n            <Title>\r\n              <td></td>\r\n              <td></td>\r\n              <td > Rice </td>\r\n              <td></td>\r\n              <td></td>\r\n            </Title>\r\n            {types('rice')}\r\n            <Title>\r\n              <td></td>\r\n              <td></td>\r\n              <td > Chow Mein </td>\r\n              <td></td>\r\n              <td></td>\r\n            </Title>\r\n            {types('mein')}\r\n            <Title>\r\n              <td></td>\r\n              <td></td>\r\n              <td > Sides </td>\r\n              <td></td>\r\n              <td></td>\r\n            </Title>\r\n            {types('side')}\r\n          </tbody>\r\n        </Table>\r\n      </Content>\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default Menu;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\form.js",["217"],"import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\nconst Form = (callback) => {\r\n\r\n    //set inicial values\r\n    const data = useFormik({\r\n        initialValues: {\r\n            quantity: '',\r\n            user: '',\r\n        },\r\n\r\n        //validate data\r\n        validationSchema: Yup.object().shape({\r\n            quantity: Yup.number().required('Quantity is required'),\r\n            user: Yup.string().required('You must be logged in')\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            console.log(data.values);\r\n        }\r\n    });\r\n\r\n    return {\r\n        data,\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\staff\\orders.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\print.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\invoice.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\menu\\basket.js",["218"],"import React, { useState } from 'react';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Modal, Button, Table, DropdownButton, Dropdown, ButtonGroup } from 'react-bootstrap';\r\nimport { RiShoppingBasketLine } from 'react-icons/ri';\r\nimport api from '../../services/api';\r\n\r\n\r\nconst Basket = () => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [orders, setOrders] = useState([]);\r\n    const [totalPrice, setTotalPrice] = useState();\r\n    const [user, setUser] = useState();\r\n\r\n    //set modal function\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    const getOrders = async () => {\r\n        //collect orders from local storage\r\n        let order = await JSON.parse(localStorage.getItem('orders'));\r\n        //set orders\r\n        setOrders(order);\r\n        if (order) {\r\n            //format order total price\r\n            const total = order.reduce(function (tot, arr) {\r\n                return setTotalPrice(parseFloat(tot + arr.total).toFixed(2));\r\n            }, 0);\r\n        }\r\n        //collect user information for last orders\r\n        const user = await JSON.parse(sessionStorage.getItem('user'));\r\n        if (user) {\r\n            setUser(user);\r\n        }\r\n        //open modal at the end\r\n        handleShow();\r\n    }\r\n\r\n    const getLastTakeaway = async () => {\r\n        //clean previous orders\r\n        setOrders([]);\r\n        setTotalPrice(null);\r\n        //call API sending userID\r\n        const order = await api.get(`/takeaway/lastorder/${user._id}`);\r\n        //set order to be displayed\r\n        setOrders(order.data.order);\r\n        setTotalPrice(order.data.total);\r\n\r\n    }\r\n\r\n\r\n    const getLastDelivery = async () => {\r\n        //clean previous orders\r\n        setOrders([]);\r\n        setTotalPrice(null);\r\n        //call API sending userID\r\n        const order = await api.get(`/delivery/lastorder/${user._id}`);\r\n        //set order to be displayed\r\n        setOrders(order.data.order);\r\n        setTotalPrice(order.data.total);\r\n\r\n    }\r\n\r\n    const HandleOrders = () => {\r\n        //iterate through orders array \r\n        return orders.map((order, key) => {\r\n            //format numbers\r\n            const price = parseFloat(order.price).toFixed(2);\r\n            let total = parseFloat(order.total).toFixed(2);\r\n            //calculate item total when calling last orders\r\n            if (isNaN(total)) {\r\n                total = parseFloat(price * order.quantity).toFixed(2);\r\n            }\r\n            //return table\r\n            return (\r\n                <tr key={key}>\r\n                    <td>{order.item}</td>\r\n                    <td>{order.dish}</td>\r\n                    <td>{order.quantity}</td>\r\n                    <td>{price}</td>\r\n                    <td>{total}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    const HandleEmptyBasket = () => {\r\n        //return empty table when no item is added\r\n        return (\r\n            <tbody>\r\n                <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                </tr>\r\n            </tbody>)\r\n    }\r\n\r\n    const deleteOrder = () => {\r\n        //clean order\r\n        localStorage.removeItem('orders');\r\n        setOrders(null);\r\n        setTotalPrice(null);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* button to call modal  */}\r\n            <Button variant=\"primary\" onClick={getOrders}>\r\n                <RiShoppingBasketLine style={{ marginBottom: '3px' }} />  Basket\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose} size='lg'>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Order:</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {/* display table  */}\r\n                    <Table responsive >\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={{ width: '80px' }}>Item</th>\r\n                                <th style={{ width: '200px' }}>Description</th>\r\n                                <th style={{ width: '80px' }}>Quantity</th>\r\n                                <th style={{ width: '100px' }}>Price (€)</th>\r\n                                <th style={{ width: '100px' }}>Total (€)</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {/* display table only when order exists  */}\r\n                            {orders && orders.length > 0 ? <HandleOrders /> : <HandleEmptyBasket />}\r\n                        </tbody>\r\n                    </Table>\r\n                    <p></p>\r\n                    {/* display final price  */}\r\n                    <p style={{\r\n                        fontSize: '16px', fontWeight: 'bold',\r\n                        backgroundColor: '#D3D3D3'\r\n                    }}>Final Total:  €  {totalPrice} </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <ButtonGroup>\r\n                        {/* delete order button  */}\r\n                        <Button variant=\"danger\" onClick={deleteOrder} style={{ marginRight: '50px' }}>\r\n                            Delete Order</Button>\r\n                        {/* last order dropdown button  */}\r\n                        <DropdownButton variant=\"info\" title='See Last Order' style={{ marginRight: '50px' }} disabled={user ? false : true}>\r\n                            <Dropdown.Item> <Button variant=\"info\" onClick={getLastTakeaway}> Takeout </Button></Dropdown.Item>\r\n                            <Dropdown.Item> <Button variant=\"info\" onClick={getLastDelivery}> Delivery </Button></Dropdown.Item>\r\n                        </DropdownButton>\r\n                        {/* checkout dropdown button disabled when \r\n                        there is no order  */}\r\n                        <DropdownButton variant=\"primary\" title='Checkout' disabled={orders ? false : true}>\r\n                            <Dropdown.Item> <Link to='/takeout'> Takeout </Link></Dropdown.Item>\r\n                            <Dropdown.Item> <Link to='/delivery'> Delivery </Link></Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </ButtonGroup>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Basket;\r\n","C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\delivery.js",["219"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\form.js",["220"],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\pages\\delivery\\style.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\styles\\menuHeader.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\services\\printer\\componentToPrint.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\routes\\privateRoutes.js",[],"C:\\Users\\bruna\\OneDrive\\Documentos\\GitHub\\takeaway-website\\src\\routes\\routes.js",[],{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},{"ruleId":"225","severity":1,"message":"229","line":44,"column":19,"nodeType":"227","messageId":"228","endLine":44,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":23,"column":21,"nodeType":"232","endLine":23,"endColumn":32},{"ruleId":"225","severity":1,"message":"226","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},{"ruleId":"233","severity":1,"message":"234","line":33,"column":8,"nodeType":"235","endLine":33,"endColumn":16,"suggestions":"236"},{"ruleId":"225","severity":1,"message":"237","line":36,"column":20,"nodeType":"227","messageId":"228","endLine":36,"endColumn":25},{"ruleId":"225","severity":1,"message":"238","line":37,"column":15,"nodeType":"227","messageId":"228","endLine":37,"endColumn":19},{"ruleId":"225","severity":1,"message":"226","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},{"ruleId":"225","severity":1,"message":"226","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},{"ruleId":"225","severity":1,"message":"239","line":1,"column":17,"nodeType":"227","messageId":"228","endLine":1,"endColumn":25},{"ruleId":"225","severity":1,"message":"240","line":2,"column":8,"nodeType":"227","messageId":"228","endLine":2,"endColumn":11},{"ruleId":"221","replacedBy":"241"},{"ruleId":"223","replacedBy":"242"},{"ruleId":"233","severity":1,"message":"243","line":38,"column":8,"nodeType":"235","endLine":38,"endColumn":10,"suggestions":"244"},{"ruleId":"225","severity":1,"message":"226","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},{"ruleId":"225","severity":1,"message":"229","line":50,"column":19,"nodeType":"227","messageId":"228","endLine":50,"endColumn":22},{"ruleId":"225","severity":1,"message":"226","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},{"ruleId":"225","severity":1,"message":"229","line":47,"column":19,"nodeType":"227","messageId":"228","endLine":47,"endColumn":22},{"ruleId":"225","severity":1,"message":"245","line":25,"column":11,"nodeType":"227","messageId":"228","endLine":25,"endColumn":22},{"ruleId":"225","severity":1,"message":"226","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},{"ruleId":"225","severity":1,"message":"229","line":30,"column":19,"nodeType":"227","messageId":"228","endLine":30,"endColumn":22},{"ruleId":"246","severity":1,"message":"247","line":30,"column":33,"nodeType":"248","messageId":"249","endLine":30,"endColumn":35},{"ruleId":"225","severity":1,"message":"226","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},{"ruleId":"225","severity":1,"message":"250","line":28,"column":19,"nodeType":"227","messageId":"228","endLine":28,"endColumn":24},{"ruleId":"233","severity":1,"message":"251","line":40,"column":8,"nodeType":"235","endLine":40,"endColumn":10,"suggestions":"252"},{"ruleId":"225","severity":1,"message":"226","line":1,"column":8,"nodeType":"227","messageId":"228","endLine":1,"endColumn":13},"no-native-reassign",["253"],"no-negated-in-lhs",["254"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'res' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data.values'. Either include it or remove the dependency array.","ArrayExpression",["255"],"'Login' is defined but never used.","'post' is assigned a value but never used.","'useState' is defined but never used.","'api' is defined but never used.",["253"],["254"],"React Hook useEffect has missing dependencies: 'data', 'order', 'reduceOrder', 'user._id', 'user.email', 'user.name', 'user.phoneNumber', and 'user.status'. Either include them or remove the dependency array.",["256"],"'waitingTime' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'total' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'order', 'reduceOrder', 'user._id', 'user.address', 'user.email', 'user.name', 'user.phoneNumber', and 'user.status'. Either include them or remove the dependency array.",["257"],"no-global-assign","no-unsafe-negation",{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},"Update the dependencies array to be: [data.values, submit]",{"range":"264","text":"265"},"Update the dependencies array to be: [data, order, reduceOrder, user._id, user.email, user.name, user.phoneNumber, user.status]",{"range":"266","text":"267"},"Update the dependencies array to be: [data, order, reduceOrder, user._id, user.address, user.email, user.name, user.phoneNumber, user.status]",{"range":"268","text":"269"},[814,822],"[data.values, submit]",[1176,1178],"[data, order, reduceOrder, user._id, user.email, user.name, user.phoneNumber, user.status]",[1232,1234],"[data, order, reduceOrder, user._id, user.address, user.email, user.name, user.phoneNumber, user.status]"]